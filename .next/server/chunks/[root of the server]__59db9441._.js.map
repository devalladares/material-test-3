{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///Users/trudyp/Desktop/material-test-3-main/pages/api/generate.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Configure API route options\nexport const config = {\n  api: {\n    bodyParser: {\n      sizeLimit: '10mb' // Increase the body size limit to 10MB\n    }\n  }\n};\n\nexport default async function handler(req, res) {\n  // Only allow POST requests\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  try {\n    const { prompt, drawingData, customApiKey, generateTextOnly } = req.body;\n\n    // Log the API request details (excluding the full drawing data for brevity)\n    console.log('API Request:', {\n      prompt: prompt.substring(0, 100) + '...',\n      hasDrawingData: !!drawingData,\n      hasCustomApiKey: !!customApiKey,\n      generateTextOnly: !!generateTextOnly\n    });\n\n    // Use custom API key if provided\n    const apiKey = customApiKey || process.env.GEMINI_API_KEY;\n    const genAI = new GoogleGenerativeAI(apiKey);\n    \n    // Configure the model with settings based on the request type\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.0-flash-exp-image-generation\",\n      generationConfig: {\n        temperature: 1,\n        topP: 0.95,\n        topK: 40,\n        maxOutputTokens: 8192,\n        responseModalities: generateTextOnly ? [\"text\"] : [\"image\", \"text\"]\n      }\n    });\n\n    // Handle text-only generation\n    if (generateTextOnly) {\n      console.log('Generating text-only response');\n      \n      // Make text-only API call\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      // Extract text from response\n      const textResponse = response.text();\n      \n      console.log('Generated text response:', textResponse.substring(0, 100) + '...');\n      \n      return res.status(200).json({\n        success: true,\n        textResponse: textResponse\n      });\n    }\n\n    // For image generation, proceed as normal\n    // Prepare the generation content\n    let generationContent;\n    if (drawingData) {\n      // If we have drawing data, include it in the request\n      generationContent = [\n        {\n          inlineData: {\n            data: drawingData,\n            mimeType: \"image/png\"\n          }\n        },\n        { text: prompt }\n      ];\n    } else {\n      // Text-only prompt if no drawing\n      generationContent = prompt;\n    }\n\n    console.log('Calling Gemini API for image generation...');\n    const result = await model.generateContent(generationContent);\n    console.log('Gemini API response received');\n\n    const response = await result.response;\n    \n    // Process the response to extract image data\n    let imageData = null;\n    for (const part of response.candidates[0].content.parts) {\n      if (part.inlineData) {\n        imageData = part.inlineData.data;\n        break;\n      }\n    }\n\n    if (!imageData) {\n      throw new Error('No image data received from the API');\n    }\n\n    return res.status(200).json({\n      success: true,\n      imageData: imageData\n    });\n  } catch (error) {\n    console.error('Error in /api/generate:', error);\n    \n    // Check for quota exceeded errors\n    if (error.message?.includes('quota') || error.message?.includes('Resource has been exhausted')) {\n      return res.status(429).json({\n        error: 'API quota exceeded. Please try again later or use your own API key.'\n      });\n    }\n    \n    return res.status(500).json({\n      error: error.message || 'An error occurred during generation.'\n    });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;;;;;AAGO,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;YACV,WAAW,OAAO,uCAAuC;QAC3D;IACF;AACF;AAEe,eAAe,QAAQ,GAAG,EAAE,GAAG;IAC5C,2BAA2B;IAC3B,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IAC5D;IAEA,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,gBAAgB,EAAE,GAAG,IAAI,IAAI;QAExE,4EAA4E;QAC5E,QAAQ,GAAG,CAAC,gBAAgB;YAC1B,QAAQ,OAAO,SAAS,CAAC,GAAG,OAAO;YACnC,gBAAgB,CAAC,CAAC;YAClB,iBAAiB,CAAC,CAAC;YACnB,kBAAkB,CAAC,CAAC;QACtB;QAEA,iCAAiC;QACjC,MAAM,SAAS,gBAAgB,QAAQ,GAAG,CAAC,cAAc;QACzD,MAAM,QAAQ,IAAI,wJAAA,CAAA,qBAAkB,CAAC;QAErC,8DAA8D;QAC9D,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YACrC,OAAO;YACP,kBAAkB;gBAChB,aAAa;gBACb,MAAM;gBACN,MAAM;gBACN,iBAAiB;gBACjB,oBAAoB,mBAAmB;oBAAC;iBAAO,GAAG;oBAAC;oBAAS;iBAAO;YACrE;QACF;QAEA,8BAA8B;QAC9B,IAAI,kBAAkB;YACpB,QAAQ,GAAG,CAAC;YAEZ,0BAA0B;YAC1B,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;YAC3C,MAAM,WAAW,MAAM,OAAO,QAAQ;YAEtC,6BAA6B;YAC7B,MAAM,eAAe,SAAS,IAAI;YAElC,QAAQ,GAAG,CAAC,4BAA4B,aAAa,SAAS,CAAC,GAAG,OAAO;YAEzE,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,SAAS;gBACT,cAAc;YAChB;QACF;QAEA,0CAA0C;QAC1C,iCAAiC;QACjC,IAAI;QACJ,IAAI,aAAa;YACf,qDAAqD;YACrD,oBAAoB;gBAClB;oBACE,YAAY;wBACV,MAAM;wBACN,UAAU;oBACZ;gBACF;gBACA;oBAAE,MAAM;gBAAO;aAChB;QACH,OAAO;YACL,iCAAiC;YACjC,oBAAoB;QACtB;QAEA,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,QAAQ,GAAG,CAAC;QAEZ,MAAM,WAAW,MAAM,OAAO,QAAQ;QAEtC,6CAA6C;QAC7C,IAAI,YAAY;QAChB,KAAK,MAAM,QAAQ,SAAS,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAE;YACvD,IAAI,KAAK,UAAU,EAAE;gBACnB,YAAY,KAAK,UAAU,CAAC,IAAI;gBAChC;YACF;QACF;QAEA,IAAI,CAAC,WAAW;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAC1B,SAAS;YACT,WAAW;QACb;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QAEzC,kCAAkC;QAClC,IAAI,MAAM,OAAO,EAAE,SAAS,YAAY,MAAM,OAAO,EAAE,SAAS,gCAAgC;YAC9F,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,OAAO;YACT;QACF;QAEA,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAC1B,OAAO,MAAM,OAAO,IAAI;QAC1B;IACF;AACF","debugId":null}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file:///Users/trudyp/Desktop/material-test-3-main/node_modules/next/dist/src/server/route-modules/pages-api/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/pages-api/module.js')\n} else {\n  if (process.env.NODE_ENV === 'development') {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.dev.js')\n  } else if (process.env.TURBOPACK) {\n    module.exports = require('next/dist/compiled/next-server/pages-api-turbo.runtime.prod.js')\n  } else {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.prod.js')\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,QAAQ,KAAK,WAAe;QAC1CH,OAAOC,OAAO,GAAGC,QAAQ;IAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACM,SAAS,EAAE;;IAIlC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///Users/trudyp/Desktop/material-test-3-main/node_modules/next/dist/src/server/route-kind.ts"],"sourcesContent":["export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n"],"names":["RouteKind"],"mappings":";;;AAAO,IAAWA,YAAAA,WAAAA,GAAAA,SAAAA,SAAAA;IAChB;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;IAED;;GAEC,GAAA,SAAA,CAAA,YAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,WAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,YAAA,GAAA;IAGD;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;WAtBeA;MAwBjB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///Users/trudyp/Desktop/material-test-3-main/node_modules/next/dist/src/build/templates/helpers.ts"],"sourcesContent":["/**\n * Hoists a name from a module or promised module.\n *\n * @param module the module to hoist the name from\n * @param name the name to hoist\n * @returns the value on the module (or promised module)\n */\nexport function hoist(module: any, name: string) {\n  // If the name is available in the module, return it.\n  if (name in module) {\n    return module[name]\n  }\n\n  // If a property called `then` exists, assume it's a promise and\n  // return a promise that resolves to the name.\n  if ('then' in module && typeof module.then === 'function') {\n    return module.then((mod: any) => hoist(mod, name))\n  }\n\n  // If we're trying to hoise the default export, and the module is a function,\n  // return the module itself.\n  if (typeof module === 'function' && name === 'default') {\n    return module\n  }\n\n  // Otherwise, return undefined.\n  return undefined\n}\n"],"names":["hoist","module","name","then","mod","undefined"],"mappings":"AAAA;;;;;;CAMC,GACD;;;AAAO,SAASA,MAAMC,MAAW,EAAEC,IAAY;IAC7C,qDAAqD;IACrD,IAAIA,QAAQD,QAAQ;QAClB,OAAOA,MAAM,CAACC,KAAK;IACrB;IAEA,gEAAgE;IAChE,8CAA8C;IAC9C,IAAI,UAAUD,UAAU,OAAOA,OAAOE,IAAI,KAAK,YAAY;QACzD,OAAOF,OAAOE,IAAI,CAAC,CAACC,MAAaJ,MAAMI,KAAKF;IAC9C;IAEA,6EAA6E;IAC7E,4BAA4B;IAC5B,IAAI,OAAOD,WAAW,cAAcC,SAAS,WAAW;QACtD,OAAOD;IACT;IAEA,+BAA+B;IAC/B,OAAOI;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///Users/trudyp/Desktop/material-test-3-main/node_modules/next/dist/src/build/templates/pages-api.ts"],"sourcesContent":["import { PagesAPIRouteModule } from '../../server/route-modules/pages-api/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\n\nimport { hoist } from './helpers'\n\n// Import the userland code.\nimport * as userland from 'VAR_USERLAND'\n\n// Re-export the handler (should be the default export).\nexport default hoist(userland, 'default')\n\n// Re-export config.\nexport const config = hoist(userland, 'config')\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesAPIRouteModule({\n  definition: {\n    kind: RouteKind.PAGES_API,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n  },\n  userland,\n})\n"],"names":["PagesAPIRouteModule","RouteKind","hoist","userland","config","routeModule","definition","kind","PAGES_API","page","pathname","bundlePath","filename"],"mappings":";;;;;AAAA,SAASA,mBAAmB,QAAQ,uDAAsD;AAC1F,SAASC,SAAS,QAAQ,0BAAyB;AAEnD,SAASC,KAAK,QAAQ,YAAW;AAEjC,4BAA4B;AAC5B,YAAYC,cAAc,eAAc;;;;;;;;;yMAGzBD,QAAAA,EAAMC,mHAAU,WAAU;AAGlC,MAAMC,2KAASF,QAAAA,EAAMC,mHAAU,UAAS;AAGxC,MAAME,cAAc,qMAAIL,sBAAAA,CAAoB;IACjDM,YAAY;QACVC,8JAAMN,YAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACV,2CAA2C;QAC3CC,YAAY;QACZC,UAAU;IACZ;cACAT;AACF,GAAE","ignoreList":[0],"debugId":null}}]
}